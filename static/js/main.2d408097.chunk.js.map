{"version":3,"sources":["layout/Header.js","component/LeafletMap.js","component/SearchBar.js","component/AlgorithmOptions.js","component/SearchButton.js","component/ElevationGain.js","component/Tolerance.js","component/MultiPathOption.js","component/DraggableMarkerSwitch.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","LeafletMap","Map","ref","mapRef","center","zoom","TileLayer","url","attribution","Rectangle","bounds","fillOpacity","interactive","SearchBar","props","resetInputField","setState","source","showSuggestions","suggestions","activeSuggestion","onChange","e","findSuggestions","currentTarget","value","setSource","onClickOption","innerText","onClickResume","state","onKeyDown","keyCode","preventDefault","length","disabled","query","temp_suggestions","axios","get","this","domainName","then","response","values","data","i","push","catch","err","alert","addressSuggestionsComponent","map","addr","index","key","onClick","type","name","placeholder","AlgorithmOptions","algorithm","target","setAlgorithm","defaultValue","label","SearchButton","setTrigger","buttonRef","variant","color","css","loading","isLoading","ElevationGain","elevationGain","setElevationGain","Tolerance","setTolerance","tolerance","nextProps","nextState","MultiPathOption","number","setNumber","DraggableMarkerSwitch","isOn","setSwitchTrigger","FormControl","component","FormControlLabel","control","Switch","checked","App","setTarget","setButtonTrigger","buttonTrigger","switchTrigger","onAndOffInputField","bool","sourceInput","targetInput","addDragMarker","sourceCoord","targetCoord","sourceDragMarker","L","marker","draggable","addTo","leafletElement","bindPopup","toFixed","on","latlng","getLatLng","lng","lat","openPopup","closePopup","targetDragMarker","fitBounds","removeDragMarker","remove","elenaQueryEncode","input","replace","elenaUrlBuilder","elevationGainMode","toleranceNumber","parseInt","changePath","clickedPolyline","focusPolyline","setStyle","bringToFront","bringToBack","findPath","draw","bind","drawCallbackFunc","results","isSucceed","removeMarkerPolyline","resultList","legnth","resultObject","sourceMarker","circleMarker","sourceAddress","targetMarker","targetAddress","polyline","positions","weight","distance","elevationAggregate","polylineList","getBounds","findPathLoading","leafletMapRef","prevProps","prevState","callbackFunc","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"oRAceA,EAZf,uKAEQ,OACI,4BAAQC,UAAU,UACd,0CAJhB,GAA4BC,a,2BC+BbC,EA9Bf,uKAGc,IAAD,OACL,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,IAAK,SAAAA,GAAG,OAAI,EAAKC,OAASD,GAC1BE,OAAQ,CAAC,SAAU,UACnBC,KAAM,IAEN,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACtBC,YAAY,2EAEE,kBAACC,EAAA,EAAD,CACIC,OAAQ,CAAC,CAAC,WAAY,YAAa,CAAC,WAAY,aAChDC,YAAa,EACbC,aAAa,UAlBrC,GAAgCb,a,kCCkKjBc,EA9Jf,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,gBAAkB,WACd,EAAKC,SAAS,CACVC,OAAQ,GACRC,iBAAiB,EACjBC,YAAa,GACbC,iBAAkB,KAnBP,EA+CnBC,SAAW,SAACC,GACR,EAAKC,gBAAgBD,EAAEE,cAAcC,OACrC,EAAKX,MAAMY,UAAUJ,EAAEE,cAAcC,OACrC,EAAKT,SAAS,CACVC,OAAQK,EAAEE,cAAcC,MACxBP,iBAAiB,EACjBE,iBAAkB,KArDP,EAyDnBO,cAAgB,SAACL,GACb,EAAKR,MAAMY,UAAUJ,EAAEE,cAAcI,WACrC,EAAKZ,SAAS,CACVG,YAAa,GACbD,iBAAiB,EACjBD,OAAQK,EAAEE,cAAcI,UACxBR,iBAAkB,KA/DP,EAmEnBS,cAAgB,SAACP,GACb,EAAKC,gBAAgB,EAAKO,MAAMb,QAChC,EAAKD,SAAS,CACVE,iBAAiB,EACjBE,iBAAkB,KAvEP,EA2EnBW,UAAY,SAACT,GACT,GAAkB,KAAdA,EAAEU,QAEFV,EAAEW,iBACF,EAAKnB,MAAMY,UAAU,EAAKI,MAAMX,YAAY,EAAKW,MAAMV,mBACvD,EAAKJ,SAAS,CACVE,iBAAiB,EACjBD,OAAQ,EAAKa,MAAMX,YAAY,EAAKW,MAAMV,kBAC1CA,iBAAkB,EAClBD,YAAa,UAGhB,GAAkB,KAAdG,EAAEU,QAAgB,CAEvB,GAAoC,IAAhC,EAAKF,MAAMV,iBACX,OAEJ,EAAKJ,SAAS,CAAEI,iBAAkB,EAAKU,MAAMV,iBAAmB,SAE/D,GAAkB,KAAdE,EAAEU,QAAgB,CAEvB,GAAI,EAAKF,MAAMV,iBAAmB,IAAM,EAAKU,MAAMX,YAAYe,OAC3D,OAEJ,EAAKlB,SAAS,CAAEI,iBAAkB,EAAKU,MAAMV,iBAAmB,SAE7C,KAAdE,EAAEU,SAEP,EAAKhB,SAAS,CACVI,iBAAkB,EAClBF,iBAAiB,EACjBC,YAAa,MAxGrB,EAAKW,MAAQ,CACTb,OAAQ,GACRC,iBAAiB,EACjBC,YAAa,GACbC,iBAAkB,EAElBe,UAAU,GARC,EAFvB,qGA0B0BC,GA1B1B,iFA2BaA,EA3Bb,wDA8BYC,EAAmB,GA9B/B,SA+BcC,IAAMC,IAAN,UAAaC,KAAK1B,MAAM2B,WAAxB,yBAAmDL,IAASM,MAC9D,SAACC,GAGG,IADA,IAAIC,EAASD,EAASE,KACbC,EAAI,EAAGA,EAAIF,EAAOV,OAAQY,IAC/BT,EAAiBU,KAAKH,EAAOE,IAEjC,EAAK9B,SAAS,CACVG,YAAakB,OAGvBW,OAAM,SAACC,GACLC,MAAM,wCA3ClB,sIAkHc,IACFC,EADC,OA0BL,OAxBIX,KAAKV,MAAMZ,iBAAmBsB,KAAKV,MAAMb,QACrCuB,KAAKV,MAAMX,YAAYe,SACvBiB,EACI,wBAAIrD,UAAU,eACT0C,KAAKV,MAAMX,YAAYiC,KAAI,SAACC,EAAMC,GAC/B,IAAIxD,EAIJ,OAHIwD,IAAU,EAAKxB,MAAMV,mBACrBtB,EAAY,qBAGZ,wBACIA,UAAWA,EACXyD,IAAG,UAAKF,EAAL,YAAaC,GAChBE,QAAS,EAAK7B,eAEb0B,QAUzB,kBAAC,IAAD,CAAMvD,UAAU,QACZ,kBAAC,IAAD,CACI2D,KAAK,OACLC,KAAK,SACLjC,MAAOe,KAAKV,MAAMb,OAClB0C,YAAanB,KAAK1B,MAAM6C,YACxBtC,SAAUmB,KAAKnB,SACfmC,QAAShB,KAAKX,cACdE,UAAWS,KAAKT,UAChBI,SAAUK,KAAKV,MAAMK,WAExBgB,OAxJjB,GAA+BpD,a,kCC+BhB6D,EAhCf,kDACI,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAOVO,SAAW,SAACC,GACR,EAAKN,SAAS,CAAE6C,UAAWvC,EAAEwC,OAAOrC,QACpC,EAAKX,MAAMiD,aAAazC,EAAEwC,OAAOrC,QARjC,EAAKK,MAAQ,CACT+B,UAAW,SAHA,EADvB,qDAeQ,OACI,8BACI,kBAAC,IAAD,CACIH,KAAK,aACLjC,MAAOe,KAAKV,MAAM+B,UAClBG,aAAa,QACblE,UAAU,mBACVuB,SAAUmB,KAAKnB,UAEf,kBAAC,IAAD,CAAQI,MAAM,QAAQwC,MAAM,WAC5B,kBAAC,IAAD,CAAQxC,MAAM,WAAWwC,MAAM,mBAzBnD,GAAsClE,a,yKCD/B,IA6BQmE,EA7Bf,4MAEIV,QAAU,SAAClC,GACP,EAAKR,MAAMqD,cAHnB,uDAOQ,OACI,yBAAKrE,UAAU,qBACX,kBAAC,IAAD,CACII,IAAKsC,KAAK4B,UACVC,QAAQ,SACRC,MAAM,UACNd,QAAShB,KAAKgB,SAJlB,UAQA,kBAAC,YAAD,CACIe,IAAKA,cAAF,KAGHD,MAAM,UACNE,QAAShC,KAAK1B,MAAM2D,iBAtBxC,GAAkC1E,aCiCnB2E,EAjCf,kDACI,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAMVO,SAAW,SAACC,GACR,EAAKN,SAAS,CAAE2D,cAAerD,EAAEwC,OAAOrC,QACxC,EAAKX,MAAM8D,iBAAiBtD,EAAEwC,OAAOrC,QAPrC,EAAKK,MAAQ,CACT6C,cAAe,QAHJ,EADvB,qDAeQ,OACI,8BACI,kBAAC,IAAD,CACIjB,KAAK,sBACLjC,MAAOe,KAAKV,MAAM6C,cAClBX,aAAa,OACblE,UAAU,uBACVuB,SAAUmB,KAAKnB,UAEf,kBAAC,IAAD,CAAQI,MAAM,OAAOwC,MAAM,SAC3B,kBAAC,IAAD,CAAQxC,MAAM,MAAMwC,MAAM,QAC1B,kBAAC,IAAD,CAAQxC,MAAM,MAAMwC,MAAM,cA1B9C,GAAmClE,aCsCpB8E,EAvCf,kDACI,WAAY/D,GAAQ,IAAD,8BACf,cAAMA,IAaVO,SAAW,SAACC,GACR,EAAKR,MAAMgE,aAAaxD,EAAEE,cAAcC,OACxC,EAAKT,SAAS,CAAE+D,UAAWzD,EAAEE,cAAcC,SAd3C,EAAKK,MAAQ,CACTiD,UAAW,IAHA,EADvB,gEASwBC,EAAWC,GACvBD,EAAU7C,UAAqC,KAAzBK,KAAKV,MAAMiD,WACjCvC,KAAKxB,SAAS,CAAE+D,UAAW,OAXvC,+BAuBQ,OACI,kBAAC,IAAD,CAAMjF,UAAU,kBACZ,kBAAC,IAAD,CACI2D,KAAK,OACLC,KAAK,YACLjC,MAAOe,KAAKV,MAAMiD,UAClBpB,YAAY,YACZtC,SAAUmB,KAAKnB,SACfc,SAAUK,KAAK1B,MAAMqB,gBA/BzC,GAA+BpC,aCkChBmF,EAjCf,kDACI,WAAYpE,GAAQ,IAAD,8BACf,cAAMA,IAMVO,SAAW,SAACC,GACR,EAAKN,SAAS,CAAEmE,OAAQ7D,EAAEwC,OAAOrC,QACjC,EAAKX,MAAMsE,UAAU9D,EAAEwC,OAAOrC,QAP9B,EAAKK,MAAQ,CACTqD,OAAQ,GAHG,EADvB,qDAeQ,OACI,8BACI,kBAAC,IAAD,CACIzB,KAAK,kBACLjC,MAAOe,KAAKV,MAAMqD,OAClBnB,aAAa,IACblE,UAAU,yBACVuB,SAAUmB,KAAKnB,UAEf,kBAAC,IAAD,CAAQI,MAAO,EAAGwC,MAAM,MACxB,kBAAC,IAAD,CAAQxC,MAAO,EAAGwC,MAAM,MACxB,kBAAC,IAAD,CAAQxC,MAAO,EAAGwC,MAAM,YA1B5C,GAAqClE,a,2BCgCtBsF,EAlCf,kDAEI,WAAYvE,GAAQ,IAAD,8BACf,cAAMA,IAMVO,SAAW,SAACC,GACR,EAAKN,SAAS,CAAEsE,MAAO,EAAKxD,MAAMwD,OAClC,EAAKxE,MAAMyE,oBAPX,EAAKzD,MAAQ,CACTwD,MAAM,GAHK,EAFvB,qDAgBQ,OACI,kBAACE,EAAA,EAAD,CAAaC,UAAU,YACnB,kBAACC,EAAA,EAAD,CACIC,QACI,kBAACC,EAAA,EAAD,CACIC,QAASrD,KAAKV,MAAMwD,KACpBjE,SAAUmB,KAAKnB,SACfqC,KAAK,kBACLY,MAAM,YAGdL,MAAM,0BA3B1B,GAA2ClE,aCarC0C,EAAa,sEAiWJqD,E,kDA5VZ,WAAYhF,GAAQ,IAAD,8BACpB,cAAMA,IA4DPY,UAAY,SAACT,GAAD,OAAY,EAAKD,SAAS,CAAEC,OAAQA,KA7D3B,EA8DrB8E,UAAY,SAACjC,GAAD,OAAY,EAAK9C,SAAS,CAAE8C,OAAQA,KA9D3B,EA+DrBC,aAAe,SAACF,GAAD,OAAe,EAAK7C,SAAS,CAAE6C,UAAWA,KA/DpC,EAgErBmC,iBAAmB,kBAAM,EAAKhF,SAAS,CAAEiF,eAAgB,EAAKnE,MAAMmE,iBAhE/C,EAiElBrB,iBAAmB,SAACD,GAAD,OAAmB,EAAK3D,SAAS,CAAE2D,cAAeA,KAjEnD,EAkElBG,aAAe,SAACC,GAAD,OAAe,EAAK/D,SAAS,CAAE+D,UAAWA,KAlEvC,EAmElBK,UAAY,SAACD,GAAD,OAAY,EAAKnE,SAAS,CAAEmE,OAAQA,KAnE9B,EAoElBI,iBAAmB,kBAAM,EAAKvE,SAAS,CAAEkF,eAAgB,EAAKpE,MAAMoE,iBApElD,EAwElBC,mBAAqB,SAACC,GAClB,EAAKC,YAAYrF,SAAS,CAAEmB,SAAUiE,IACtC,EAAKE,YAAYtF,SAAS,CAAEmB,SAAUiE,IAClCA,IACA,EAAKC,YAAYtF,kBACjB,EAAKuF,YAAYvF,oBA7EP,EAiFlBwF,cAAgB,WACZ,IAAMC,EAAc,CAAC,QAAS,SACxBC,EAAc,CAAC,QAAS,SAE9B,EAAKzF,SAAS,CACVwF,YAAaA,EACbC,YAAaA,IAGjB,EAAKC,iBAAmBC,IAAEC,OAAOJ,EAAa,CAACK,WAAW,IAAOC,MAAM,EAAK1D,IAAI2D,gBAAgBC,UAAxE,kEACuCR,EAAY,GAAGS,QAAQ,GAD9D,0CACkGT,EAAY,GAAGS,QAAQ,KAC/IC,GAAG,CACD,KAAQ,SAAC5F,GACL,IAAM6F,EAAS7F,EAAEwC,OAAOsD,YACxB9F,EAAEwC,OAAOkD,UAAT,kEAC+DG,EAAOE,IAAIJ,QAAQ,GADlF,0CACsHE,EAAOG,IAAIL,QAAQ,KAEzI,EAAKjG,SAAS,CAAEwF,YAAc,CAACW,EAAOG,IAAKH,EAAOE,QAEtD,UAAa,kBAAM,EAAKX,iBAAiBa,aACzC,SAAY,kBAAM,EAAKb,iBAAiBc,gBAI5C,EAAKC,iBAAmBd,IAAEC,OAAOH,EAAa,CAACI,WAAW,IAAOC,MAAM,EAAK1D,IAAI2D,gBAAgBC,UAAxE,kEACuCP,EAAY,GAAGQ,QAAQ,GAD9D,0CACkGR,EAAY,GAAGQ,QAAQ,KAC/IC,GAAG,CACD,KAAQ,SAAC5F,GACL,IAAM6F,EAAS7F,EAAEwC,OAAOsD,YACxB9F,EAAEwC,OAAOkD,UAAT,kEAC+DG,EAAOE,IAAIJ,QAAQ,GADlF,0CACsHE,EAAOG,IAAIL,QAAQ,KAEzI,EAAKjG,SAAS,CAAEyF,YAAa,CAACU,EAAOG,IAAKH,EAAOE,QAErD,UAAa,kBAAM,EAAKI,iBAAiBF,aACzC,SAAY,kBAAM,EAAKE,iBAAiBD,gBAG5C,EAAKpE,IAAI2D,eAAeW,UAAU,CAAClB,EAAaC,KAvHlC,EA0HlBkB,iBAAmB,WACf,EAAKjB,iBAAiBkB,SACtB,EAAKH,iBAAiBG,SACtB,EAAKlB,iBAAmB,KACxB,EAAKe,iBAAmB,MA9HV,EAqIlBI,iBAAmB,SAACC,GAIhB,OADAA,GADAA,GADAA,EAAQA,EAAMC,QAAQ,IAAK,OACbA,QAAQ,IAAK,OACbA,QAAQ,IAAK,OAxIb,EA6IlBC,gBAAkB,WACd,GAAI,EAAKlG,MAAMoE,cAAe,OAEwD,EAAKpE,MAA/E0E,EAFkB,EAElBA,YAAaC,EAFK,EAELA,YAAa5C,EAFR,EAEQA,UAAWc,EAFnB,EAEmBA,cAAeI,EAFlC,EAEkCA,UAAWI,EAF7C,EAE6CA,OACnE8C,EAAsC,KAAlBtD,EAAuBA,EAAgB,OAC3DuD,EAAgC,KAAdnD,EAAmB,IAAMoD,SAASpD,GAExD,MAAM,GAAN,OAAUtC,EAAV,sBAAkCoB,EAAlC,iBAAoD2C,EAAY,GAAhE,YAAsEA,EAAY,GAAlF,eAA2FC,EAAY,GAAvG,YAA6GA,EAAY,GAAzH,mBAAsItB,EAAtI,oBAAwJ8C,EAAxJ,sBAAuLC,GAEtL,MAEuD,EAAKpG,MAArD+B,EAFP,EAEOA,UAAWc,EAFlB,EAEkBA,cAAeI,EAFjC,EAEiCA,UAAWI,EAF5C,EAE4CA,OACzClE,EAAS,EAAK4G,iBAAiB,EAAK/F,MAAMb,QAC1C6C,EAAS,EAAK+D,iBAAiB,EAAK/F,MAAMgC,QAC1CmE,EAAsC,KAAlBtD,EAAuBA,EAAgB,OAC3DuD,EAAgC,KAAdnD,EAAmB,IAAMoD,SAASpD,GAExD,MAAM,GAAN,OAAUtC,EAAV,sBAAkCoB,EAAlC,qBAAwD5C,EAAxD,mBAAyE6C,EAAzE,mBAA0FqB,EAA1F,oBAA4G8C,EAA5G,sBAA2IC,IA9JjI,EAmKlBE,WAAa,SAAC9G,GACV,IAAI+G,EAAkB/G,EAAEwC,OACpBuE,IAAoB,EAAKC,gBAI7BD,EAAgBE,SAAS,CAACjE,MAAO,YACjC+D,EAAgBG,eAChB,EAAKF,cAAcC,SAAS,CAACjE,MAAO,SACpC,EAAKgE,cAAcG,cACnB,EAAKH,cAAgBD,IA7KP,EAmLrBK,SAAW,WACC,EAAK5G,MAAMoE,eAAwC,KAAtB,EAAKpE,MAAMb,QAAuC,KAAtB,EAAKa,MAAMgC,OAK3E,EAAK6E,KAAKC,KAAV,gBAAqB,EAAKZ,kBAAmB,EAAKa,kBAJxC3F,MAAM,uCArLA,EA8MrB2F,iBAAmB,SAACC,EAASC,GACtB,GAAIA,EAAW,CACX,EAAKC,uBAEL,IAAIC,EAAaH,EAAQjG,KAEC,IAAtBoG,EAAWC,QACXhG,MAAM,oBAGV,IAAK,IAAIJ,EAAI,EAAGA,EAAImG,EAAW/G,OAAQY,IAAK,CACxC,IAAIqG,EAAeF,EAAWnG,GAEpB,IAANA,EAAU,WACN,EAAKhB,MAAMoE,cACX,EAAKkD,aAAezC,IAAE0C,aAAaF,EAAa3C,YAAa,CAAClC,MAAO,UAAUwC,MAAM,EAAK1D,IAAI2D,gBAAgBC,UAA1F,qEAC8CmC,EAAaG,gBAC7EpC,GAAG,CACD,UAAa,kBAAM,EAAKkC,aAAa7B,aACrC,SAAY,kBAAM,EAAK6B,aAAa5B,gBAGxC,EAAK+B,aAAe5C,IAAE0C,aAAaF,EAAa1C,YAAa,CAACnC,MAAO,QAAQwC,MAAM,EAAK1D,IAAI2D,gBAAgBC,UAAxF,qEAC8CmC,EAAaK,gBAC7EtC,GAAG,CACD,UAAa,kBAAM,EAAKqC,aAAahC,aACrC,SAAY,kBAAM,EAAKgC,aAAa/B,gBAoB5C,IAAIiC,EAAW9C,IAAE8C,SAASN,EAAaO,UAAW,CAACC,OAAQ,IAAI7C,MAAM,EAAK1D,IAAI2D,gBAAgBC,UAA/E,sCAC4C,KAAxBmC,EAAaS,UAAkB3C,QAAQ,GAD3D,8CACmGkC,EAAaU,qBAC7H3C,GAAG,CACD,MAAS,EAAKkB,WACd,UAAa,kBAAMqB,EAASlC,aAC5B,SAAY,kBAAMkC,EAASjC,gBAE/B,EAAKc,cAAgBmB,EACrB,EAAKK,aAAa/G,KAAK0G,GAzCb,GA2CR,WACF,IAAIA,EAAW9C,IAAE8C,SAASN,EAAaO,UAAW,CAACC,OAAQ,EAAGrF,MAAO,SAASwC,MAAM,EAAK1D,IAAI2D,gBAAgB0B,cAAczB,UAA5G,sCAC4C,KAAxBmC,EAAaS,UAAkB3C,QAAQ,GAD3D,8CACmGkC,EAAaU,qBAC7H3C,GAAG,CACD,MAAS,EAAKkB,WACd,UAAa,kBAAMqB,EAASlC,aAC5B,SAAY,kBAAMkC,EAASjC,gBAE/B,EAAKsC,aAAa/G,KAAK0G,GARrB,GAYV,EAAKrG,IAAI2D,eAAeW,UAAU,EAAKoC,aAAa,GAAGC,aAG3D,EAAK/I,SAAS,CAAEgJ,iBAAiB,KArRnB,EAyRlBhB,qBAAuB,WASnB,GARI,EAAKI,eACL,EAAKA,aAAaxB,SAClB,EAAKwB,aAAe,MAEpB,EAAKG,eACL,EAAKA,aAAa3B,SAClB,EAAK2B,aAAe,MAES,IAA7B,EAAKO,aAAa5H,OAAc,CAChC,IAAK,IAAIY,EAAI,EAAGA,EAAI,EAAKgH,aAAa5H,OAAQY,IAC1C,EAAKgH,aAAahH,GAAG8E,SAEzB,EAAKkC,aAAe,KApS9B,EAAKhI,MAAQ,CACZb,OAAQ,GACRuF,YAAa,GACb1C,OAAQ,GACR2C,YAAa,GACJ5C,UAAW,QACXc,cAAe,OACfI,UAAW,GACXI,OAAQ,EACRc,eAAe,EACfC,eAAe,EACf8D,iBAAiB,GAGrB,EAAKF,aAAe,GACpB,EAAKV,aAAe,KACpB,EAAKG,aAAe,KACpB,EAAKjB,cAAgB,KAErB,EAAK5B,iBAAmB,KACxB,EAAKe,iBAAmB,KAtBV,E,gEA4BpBjF,KAAKY,IAAMZ,KAAKyH,cAAc9J,S,yCAGT+J,EAAWC,GAEM,SAA5BA,EAAUxF,eAAyD,SAA7BnC,KAAKV,MAAM6C,eACjDnC,KAAKxB,SAAS,CAAE+D,UAAW,KAI3BvC,KAAKV,MAAMoE,cACN1D,KAAKkE,kBAAqBlE,KAAKiF,mBAChCjF,KAAK2D,oBAAmB,GACxB3D,KAAKwG,uBACLxG,KAAK+D,iBAIL/D,KAAKkE,kBAAoBlE,KAAKiF,mBAC9BjF,KAAK2D,oBAAmB,GACxB3D,KAAKmF,oBAKTnF,KAAKV,MAAMmE,gBACXzD,KAAKkG,WACLlG,KAAKxB,SAAS,CAAEiF,eAAe,O,oEAuI/B1F,EAAK6J,G,uFACLrB,GAAY,EACZD,EAAU,K,SACdxG,IAAMC,IAAIhC,GAAKmC,MACX,SAACE,GACG,EAAK5B,SAAS,CAAEgJ,iBAAiB,IACjClB,EAAUlG,KAEhBI,OAAM,SAACC,GACLC,MAAM,6CACN6F,GAAY,K,OAEhBqB,EAAatB,EAASC,G,mIAmGjB,IAAD,OACP,OACC,6BACC,kBAAC,EAAD,MACS,kBAAC,EAAD,CACIxD,iBAAkB/C,KAAK+C,mBAEpC,kBAAC,EAAD,CACCrF,IAAK,SAAAA,GAAG,OAAI,EAAK+J,cAAgB/J,KAEzB,kBAAC,EAAD,CACIA,IAAK,SAAAA,GAAG,OAAI,EAAKmG,YAAcnG,GAC/ByD,YAAY,yBACZjC,UAAWc,KAAKd,UAChBe,WAAYA,IAEhB,kBAAC,EAAD,CACIvC,IAAK,SAAAA,GAAG,OAAI,EAAKoG,YAAcpG,GAC3CyD,YAAY,uBACAjC,UAAWc,KAAKuD,UAChBtD,WAAYA,IAEzB,kBAAC,EAAD,CACCsB,aAAcvB,KAAKuB,eAEX,kBAAC,EAAD,CACIa,iBAAkBpC,KAAKoC,mBAE3B,kBAAC,EAAD,CACID,cAAenC,KAAKV,MAAM6C,cAC1BG,aAActC,KAAKsC,aACnB3C,SAAuC,SAA7BK,KAAKV,MAAM6C,gBAEzB,kBAAC,EAAD,CACIS,UAAW5C,KAAK4C,YAEpB,kBAAC,EAAD,CACItD,MAAOU,KAAKV,MACZqC,WAAY3B,KAAKwD,iBACjBvB,UAAWjC,KAAKV,MAAMkI,uB,GArVxBK,IAAMtK,WCRJuK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxI,MAAK,SAAAyI,GACJA,EAAaC,gBAEdpI,OAAM,SAAAqI,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2d408097.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Header extends Component {\n    render() {\n        return (\n            <header className='header'>\n                <h1>Elena</h1>\n            </header>\n        )\n    }\n}\n\n\n\nexport default Header\n","import React, { Component } from 'react'\nimport { Map, TileLayer, Rectangle } from 'react-leaflet'\n\nexport class LeafletMap extends Component {\n\n\n    render() {\n        return (\n            <div>\n                <Map\n                    ref={ref => this.mapRef = ref}\n                    center={[37.7749, -122.4194]}\n                    zoom={13}\n                >\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\t\t\t\t\t\tattribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                    />\n                    <Rectangle\n                        bounds={[[37.781233, -122.454557], [37.760753, -122.428663]]}\n                        fillOpacity={0.0}\n                        interactive={false}\n                    />\n\n                    \n\n\n                </Map>\n            </div>\n        )\n    }\n}\n\nexport default LeafletMap\n/* [[37.781233, 37.760753], [-122.428663, -122.454557]] */","import React, { Component } from 'react'\nimport Form from 'muicss/lib/react/form';\nimport Input from 'muicss/lib/react/input';\nimport axios from 'axios';\n\n\n\nexport class SearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            source: '',\n            showSuggestions: false,\n            suggestions: [],\n            activeSuggestion: 0,\n\n            disabled: false\n        }\n\n        \n    }\n\n    resetInputField = () => {\n        this.setState({ \n            source: '',\n            showSuggestions: false,\n            suggestions: [],\n            activeSuggestion: 0\n        })\n    }\n\n\n    async findSuggestions(query) {\n        if (!query) {\n            return\n        }\n        var temp_suggestions = []\n        await axios.get(`${this.props.domainName}/autocomplete/${query}`).then(\n            (response) => {\n                \n                let values = response.data\n                for (var i = 0; i < values.length; i++) {\n                    temp_suggestions.push(values[i])\n                }\n                this.setState({\n                    suggestions: temp_suggestions\n                })\n            }\n        ).catch((err) => {\n            alert('server is not started or no data!')\n            return\n        })\n    }\n\n\n    onChange = (e) => {\n        this.findSuggestions(e.currentTarget.value)\n        this.props.setSource(e.currentTarget.value)\n        this.setState({ \n            source: e.currentTarget.value,\n            showSuggestions: true,\n            activeSuggestion: 0\n         })\n    }\n\n    onClickOption = (e) => {\n        this.props.setSource(e.currentTarget.innerText)\n        this.setState({\n            suggestions: [],\n            showSuggestions: false,\n            source: e.currentTarget.innerText,\n            activeSuggestion: 0\n        })\n    }\n\n    onClickResume = (e) => {\n        this.findSuggestions(this.state.source)\n        this.setState({\n            showSuggestions: true,\n            activeSuggestion: 0\n        })\n    }\n\n    onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            // enter\n            e.preventDefault()\n            this.props.setSource(this.state.suggestions[this.state.activeSuggestion])\n            this.setState({\n                showSuggestions: false,\n                source: this.state.suggestions[this.state.activeSuggestion],\n                activeSuggestion: 0,\n                suggestions: []\n            })\n        }\n        else if (e.keyCode === 38) {\n            // up arrow\n            if (this.state.activeSuggestion === 0) {\n                return ;\n            }\n            this.setState({ activeSuggestion: this.state.activeSuggestion - 1 })\n        }\n        else if (e.keyCode === 40) {\n            // down arrow\n            if (this.state.activeSuggestion + 1 === this.state.suggestions.length) {\n                return ;\n            }\n            this.setState({ activeSuggestion: this.state.activeSuggestion + 1 })\n        }\n        else if (e.keyCode === 27) {\n            // esc\n            this.setState({\n                activeSuggestion: 0,\n                showSuggestions: false,\n                suggestions: []\n            })\n        }\n    }\n\n\n    render() {\n        let addressSuggestionsComponent;\n        if (this.state.showSuggestions && this.state.source) {\n            if (this.state.suggestions.length) {\n                addressSuggestionsComponent = (\n                    <ul className='suggestions'>\n                        {this.state.suggestions.map((addr, index) => {\n                            let className;\n                            if (index === this.state.activeSuggestion) {\n                                className = 'suggestion-active'\n                            }\n                            return (\n                                <li \n                                    className={className} \n                                    key={`${addr},${index}`} \n                                    onClick={this.onClickOption}\n                                >\n                                    {addr}\n                                </li>\n                            )\n                        })}\n                    </ul>\n                )\n            }\n        }\n\n        return (\n            <Form className='form'>\n                <Input \n                    type='text'\n                    name='source'\n                    value={this.state.source}\n                    placeholder={this.props.placeholder}\n                    onChange={this.onChange}\n                    onClick={this.onClickResume}\n                    onKeyDown={this.onKeyDown}\n                    disabled={this.state.disabled}\n                />\n                {addressSuggestionsComponent}\n            </Form>\n        )\n    }\n}\n\nexport default SearchBar\n\n    \n\n","import React, { Component } from 'react'\n\nimport Option from 'muicss/lib/react/option';\nimport Select from 'muicss/lib/react/select';\n\n\nexport class AlgorithmOptions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            algorithm: 'astar'\n        }\n    }\n    \n\n    onChange = (e) => {\n        this.setState({ algorithm: e.target.value })\n        this.props.setAlgorithm(e.target.value)\n    }\n\n    render() {\n        return (\n            <form>\n                <Select\n                    name='algoOption'\n                    value={this.state.algorithm}\n                    defaultValue='astar'\n                    className='algorithm-select'\n                    onChange={this.onChange}\n                >\n                    <Option value='astar' label='AStart'/>\n                    <Option value='dijkstra' label='Dijkstra'/>\n                </Select>\n            </form>\n        )\n    }\n}\n\nexport default AlgorithmOptions\n","import React, { Component } from 'react'\nimport Button from 'muicss/lib/react/button'\nimport { css } from '@emotion/core'\nimport { BarLoader } from 'react-spinners'\n\nexport class SearchButton extends Component {\n\n    onClick = (e) => {\n        this.props.setTrigger()\n    }\n    \n    render() {\n        return (\n            <div className='search-button-div'>\n                <Button \n                    ref={this.buttonRef}\n                    variant='raised'\n                    color='primary'\n                    onClick={this.onClick}\n                >\n                    Search\n                </Button>\n                <BarLoader\n                    css={css`\n                        margin: 0.5%\n                    `}\n                    color='#36D7B7'\n                    loading={this.props.isLoading}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SearchButton\n","import React, { Component } from 'react'\n\nimport Option from 'muicss/lib/react/option';\nimport Select from 'muicss/lib/react/select';\n\nexport class ElevationGain extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            elevationGain: 'none'\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({ elevationGain: e.target.value })\n        this.props.setElevationGain(e.target.value)\n    }\n    \n\n    render() {\n        return (\n            <form>\n                <Select\n                    name='elevationGainOption'\n                    value={this.state.elevationGain}\n                    defaultValue='none'\n                    className='elevationGain-select'\n                    onChange={this.onChange}\n                >\n                    <Option value='none' label='None'/>\n                    <Option value='max' label='Max'/>\n                    <Option value='min' label='Min'/>\n                </Select>\n            </form>\n        )\n    }\n}\n\nexport default ElevationGain\n","import React, { Component } from 'react'\nimport Form from 'muicss/lib/react/form';\nimport Input from 'muicss/lib/react/input';\n\nexport class Tolerance extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tolerance: '',\n        }\n    }\n\n\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.disabled && this.state.tolerance !== '') {\n            this.setState({ tolerance: '' })\n        }\n    }\n\n    onChange = (e) => {\n        this.props.setTolerance(e.currentTarget.value)\n        this.setState({ tolerance: e.currentTarget.value })\n    }\n\n    \n\n    render() {\n        return (\n            <Form className='tolerance-form'>\n                <Input\n                    type='text'\n                    name='tolerance'\n                    value={this.state.tolerance}\n                    placeholder='Tolerance'\n                    onChange={this.onChange}\n                    disabled={this.props.disabled}\n                >\n                </Input>\n            </Form>\n        )\n    }\n}\n\nexport default Tolerance\n","import React, { Component } from 'react'\n\nimport Option from 'muicss/lib/react/option';\nimport Select from 'muicss/lib/react/select';\n\nexport class MultiPathOption extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            number: 1\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({ number: e.target.value })\n        this.props.setNumber(e.target.value)\n    }\n    \n\n    render() {\n        return (\n            <form>\n                <Select\n                    name='multiPathOption'\n                    value={this.state.number}\n                    defaultValue='1'\n                    className='multiPathOption-select'\n                    onChange={this.onChange}\n                >\n                    <Option value={1} label='1'/>\n                    <Option value={2} label='2'/>\n                    <Option value={3} label='3'/>\n                </Select>\n            </form>\n        )\n    }\n}\n\nexport default MultiPathOption\n","import React, { Component } from 'react'\nimport { FormControl, FormControlLabel, Switch } from '@material-ui/core';\n\nexport class DraggableMarkerSwitch extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOn: false\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({ isOn: !this.state.isOn })\n        this.props.setSwitchTrigger()\n    }\n    \n\n    render() {\n        return (\n            <FormControl component='fieldset'>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={this.state.isOn}\n                            onChange={this.onChange}\n                            name='draggableMarker'\n                            color='primary'\n                        />\n                    }\n                    label='Draggable Marker'\n                />\n            </FormControl>\n        )\n    }\n}\n\nexport default DraggableMarkerSwitch\n","import React from 'react'\nimport './App.css'\nimport './App.scss'\nimport L from 'leaflet'\nimport axios from 'axios'\nimport Header from './layout/Header'\nimport LeafletMap from './component/LeafletMap'\nimport SearchBar from './component/SearchBar'\nimport AlgorithmOptions from './component/AlgorithmOptions'\nimport SearchButton from './component/SearchButton'\nimport ElevationGain from './component/ElevationGain'\nimport Tolerance from './component/Tolerance'\nimport MultiPathOption from './component/MultiPathOption'\nimport DraggableMarkerSwitch from './component/DraggableMarkerSwitch'\n\n\nconst domainName = 'http://elenabackend-env.eba-scmatqp8.us-east-1.elasticbeanstalk.com'\n/* const domainName = 'http://localhost:5000' */\n\n\nclass App extends React.Component {\n  \tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsource: '',\n\t\t\tsourceCoord: [], // lat, lon\n\t\t\ttarget: '',\n\t\t\ttargetCoord: [], // lat, lon\n            algorithm: 'astar',\n            elevationGain: 'none',\n            tolerance: '',\n            number: 1,\n            buttonTrigger: false,\n            switchTrigger: false,\n            findPathLoading: false\n        }\n        \n        this.polylineList = []\n        this.sourceMarker = null;\n        this.targetMarker = null;\n        this.focusPolyline = null;\n\n        this.sourceDragMarker = null\n        this.targetDragMarker = null\n\t}\n\n\n    // life cycle control\n\tcomponentDidMount() {\n\t\tthis.map = this.leafletMapRef.mapRef\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        // disable tolerance field when elevationGain is none\n        if (prevState.elevationGain !== 'none' && this.state.elevationGain === 'none') {\n            this.setState({ tolerance: '' })\n        }\n\n        // change to draggable marker\n        if (this.state.switchTrigger) {\n            if (!this.sourceDragMarker || !this.targetDragMarker) {\n                this.onAndOffInputField(true)\n                this.removeMarkerPolyline()\n                this.addDragMarker()\n            }\n        }\n        else {\n            if (this.sourceDragMarker && this.targetDragMarker) {\n                this.onAndOffInputField(false)\n                this.removeDragMarker()\n            }\n        }\n\n        // search button triggered\n        if (this.state.buttonTrigger) {\n            this.findPath()\n            this.setState({ buttonTrigger: false })\n        }\n    }\n\n\n    // setter\n\tsetSource = (source) => this.setState({ source: source })\n\tsetTarget = (target) => this.setState({ target: target })\n\tsetAlgorithm = (algorithm) => this.setState({ algorithm: algorithm })\n\tsetButtonTrigger = () => this.setState({ buttonTrigger: !this.state.buttonTrigger })\n    setElevationGain = (elevationGain) => this.setState({ elevationGain: elevationGain })\n    setTolerance = (tolerance) => this.setState({ tolerance: tolerance })\n    setNumber = (number) => this.setState({ number: number })\n    setSwitchTrigger = () => this.setState({ switchTrigger: !this.state.switchTrigger })\n\n\n    // draggable marker related functions\n    onAndOffInputField = (bool) => {\n        this.sourceInput.setState({ disabled: bool })\n        this.targetInput.setState({ disabled: bool })\n        if (bool) {\n            this.sourceInput.resetInputField()\n            this.targetInput.resetInputField()\n        }\n    }\n\n    addDragMarker = () => {\n        const sourceCoord = [37.773, -122.445]\n        const targetCoord = [37.772, -122.443]\n\n        this.setState({\n            sourceCoord: sourceCoord,\n            targetCoord: targetCoord\n        })\n\n        this.sourceDragMarker = L.marker(sourceCoord, {draggable: true}).addTo(this.map.leafletElement).bindPopup(\n            `<Strong>Source:</Strong><br><strong>Longitide: </strong>${sourceCoord[1].toFixed(3)}<br><strong>Latitude: </strong>${sourceCoord[0].toFixed(3)}`\n        ).on({\n            'drag': (e) => {\n                const latlng = e.target.getLatLng();\n                e.target.bindPopup(\n                    `<Strong>Source:</Strong><br><strong>Longitide: </strong>${latlng.lng.toFixed(3)}<br><strong>Latitude: </strong>${latlng.lat.toFixed(3)}`\n                )\n                this.setState({ sourceCoord:  [latlng.lat, latlng.lng]})\n            },\n            'mouseover': () => this.sourceDragMarker.openPopup(),\n            'mouseout': () => this.sourceDragMarker.closePopup()\n        })\n\n        \n        this.targetDragMarker = L.marker(targetCoord, {draggable: true}).addTo(this.map.leafletElement).bindPopup(\n            `<Strong>Target:</Strong><br><strong>Longitide: </strong>${targetCoord[1].toFixed(3)}<br><strong>Latitude: </strong>${targetCoord[0].toFixed(3)}`\n        ).on({\n            'drag': (e) => {\n                const latlng = e.target.getLatLng();\n                e.target.bindPopup(\n                    `<Strong>Target:</Strong><br><strong>Longitide: </strong>${latlng.lng.toFixed(3)}<br><strong>Latitude: </strong>${latlng.lat.toFixed(3)}`\n                )\n                this.setState({ targetCoord: [latlng.lat, latlng.lng] })\n            },\n            'mouseover': () => this.targetDragMarker.openPopup(),\n            'mouseout': () => this.targetDragMarker.closePopup()\n        })\n\n        this.map.leafletElement.fitBounds([sourceCoord, targetCoord])\n    }\n\n    removeDragMarker = () => {\n        this.sourceDragMarker.remove()\n        this.targetDragMarker.remove()\n        this.sourceDragMarker = null\n        this.targetDragMarker = null\n    }\n\n\n\n\n    // url or address encoding\n    elenaQueryEncode = (input) => {\n        input = input.replace('+', '!-')\n        input = input.replace('&', '!,')\n        input = input.replace('=', '!<')\n        return input\n    }\n\n    // url builder\n    elenaUrlBuilder = () => {\n        if (this.state.switchTrigger) {\n            // using longitude and latitude\n            const { sourceCoord, targetCoord, algorithm, elevationGain, tolerance, number } = this.state\n            let elevationGainMode = elevationGain !== '' ? elevationGain : 'none'\n            let toleranceNumber = tolerance === '' ? 100 : parseInt(tolerance)\n\n            return `${domainName}/find_path/${algorithm}?from=${sourceCoord[1]},${sourceCoord[0]}&to=${targetCoord[1]},${targetCoord[0]}&number=${number}&elemode=${elevationGainMode}&tolerance=${toleranceNumber}`\n        }\n        else {\n            // using address\n            const { algorithm, elevationGain, tolerance, number } = this.state\n            let source = this.elenaQueryEncode(this.state.source)\n            let target = this.elenaQueryEncode(this.state.target)\n            let elevationGainMode = elevationGain !== '' ? elevationGain : 'none'\n            let toleranceNumber = tolerance === '' ? 100 : parseInt(tolerance)\n\n            return `${domainName}/find_path/${algorithm}?fromaddr=${source}&toaddr=${target}&number=${number}&elemode=${elevationGainMode}&tolerance=${toleranceNumber}`\n        }\n    }\n\n    // if there are multiple polyline, user can click the prefered polyline\n    changePath = (e) => {\n        let clickedPolyline = e.target\n        if (clickedPolyline === this.focusPolyline) {\n            return\n        }\n\n        clickedPolyline.setStyle({color: '#3388ff'})\n        clickedPolyline.bringToFront()\n        this.focusPolyline.setStyle({color: 'gray'})\n        this.focusPolyline.bringToBack()\n        this.focusPolyline = clickedPolyline\n    }\n\n\n\n    // find path\n\tfindPath = () => {\n        if (!this.state.switchTrigger && (this.state.source === '' || this.state.target === '')) {\n                alert('Enter source and target address...')\n                return\n        }\n        else {\n\t\t    this.draw.bind(this)(this.elenaUrlBuilder(), this.drawCallbackFunc)\n        }\n    }\n    \n    // get the result paths\n\tasync draw(url, callbackFunc) {\n        let isSucceed = true\n        let results = null\n\t\tawait axios.get(url).then(\n            (values) => {\n                this.setState({ findPathLoading: true })\n                results = values\n            }\n        ).catch((err) => {\n            alert('server is not started or no such address!')\n            isSucceed = false\n        })\n        callbackFunc(results, isSucceed)\n\t}\n\n    // draw the result paths\n\tdrawCallbackFunc = (results, isSucceed) => {\n        if (isSucceed) {\n            this.removeMarkerPolyline()\n\n            let resultList = results.data\n\n            if (resultList.legnth === 0) {\n                alert('Paths not found!')\n            }\n\n            for (var i = 0; i < resultList.length; i++) {\n                let resultObject = resultList[i]\n\n                if (i === 0) {\n                    if (this.state.switchTrigger) {\n                        this.sourceMarker = L.circleMarker(resultObject.sourceCoord, {color: 'green'}).addTo(this.map.leafletElement).bindPopup(\n                            `<Strong>Source Point</Strong><br><Strong>Address: </Strong>${resultObject.sourceAddress}`\n                        ).on({\n                            'mouseover': () => this.sourceMarker.openPopup(),\n                            'mouseout': () => this.sourceMarker.closePopup()\n                        })\n\n                        this.targetMarker = L.circleMarker(resultObject.targetCoord, {color: 'red'}).addTo(this.map.leafletElement).bindPopup(\n                            `<Strong>Target Point</Strong><br><Strong>Address: </Strong>${resultObject.targetAddress}`\n                        ).on({\n                            'mouseover': () => this.targetMarker.openPopup(),\n                            'mouseout': () => this.targetMarker.closePopup()\n                        })\n                    }\n                    else {\n                        this.sourceMarker = L.circleMarker(resultObject.sourceCoord, {color: 'green'}).addTo(this.map.leafletElement).bindPopup(\n                            `<Strong>Source Point</Strong><br><Strong>Address: </Strong>${resultObject.sourceAddress}`\n                        ).on({\n                            'mouseover': () => this.sourceMarker.openPopup(),\n                            'mouseout': () => this.sourceMarker.closePopup()\n                        })\n        \n                        this.targetMarker = L.circleMarker(resultObject.targetCoord, {color: 'red'}).addTo(this.map.leafletElement).bindPopup(\n                            `<Strong>Target Point</Strong><br><Strong>Address: </Strong>${resultObject.targetAddress}`\n                        ).on({\n                            'mouseover': () => this.targetMarker.openPopup(),\n                            'mouseout': () => this.targetMarker.closePopup()\n                        })\n                    }\n                    \n\n                    let polyline = L.polyline(resultObject.positions, {weight: 5}).addTo(this.map.leafletElement).bindPopup(\n                        `<Strong>Distance: </Strong>${(resultObject.distance * 0.001).toFixed(3)} km<br><Strong>Elevation: </Strong>${resultObject.elevationAggregate}`\n                    ).on({\n                        'click': this.changePath,\n                        'mouseover': () => polyline.openPopup(),\n                        'mouseout': () => polyline.closePopup()\n                    })\n                    this.focusPolyline = polyline\n                    this.polylineList.push(polyline)\n                }\n                else {\n                    let polyline = L.polyline(resultObject.positions, {weight: 5, color: 'gray'}).addTo(this.map.leafletElement).bringToBack().bindPopup(\n                        `<Strong>Distance: </Strong>${(resultObject.distance * 0.001).toFixed(3)} km<br><Strong>Elevation: </Strong>${resultObject.elevationAggregate}`\n                    ).on({\n                        'click': this.changePath,\n                        'mouseover': () => polyline.openPopup(),\n                        'mouseout': () => polyline.closePopup()\n                    })\n                    this.polylineList.push(polyline)\n                }\n            }\n\n            this.map.leafletElement.fitBounds(this.polylineList[0].getBounds())\n        }\n\n        this.setState({ findPathLoading: false })\n\t} \n\n    // remove the result markers and polylines\n    removeMarkerPolyline = () => { \n        if (this.sourceMarker) {\n            this.sourceMarker.remove()\n            this.sourceMarker = null\n        }\n        if (this.targetMarker) {\n            this.targetMarker.remove()\n            this.targetMarker = null\n        }\n        if (this.polylineList.length !== 0) {\n            for (var i = 0; i < this.polylineList.length; i++) {\n                this.polylineList[i].remove()\n            }\n            this.polylineList = []\n        }\n        \n    }\n\t\n\n\n  \trender() {\n    \treturn (\n    \t\t<div>\n\t\t\t    <Header/>\n                <DraggableMarkerSwitch\n                    setSwitchTrigger={this.setSwitchTrigger}\n                />\n\t\t    \t<LeafletMap\n\t    \t\t\tref={ref => this.leafletMapRef = ref}\n    \t\t\t/>\n                <SearchBar \n                    ref={ref => this.sourceInput = ref}\n                    placeholder='Enter start address...'\n                    setSource={this.setSource}\n                    domainName={domainName}\n\t    \t\t/>\n                <SearchBar \n                    ref={ref => this.targetInput = ref}\n\t\t\t    \tplaceholder='Enter end address...'\n                    setSource={this.setTarget}\n                    domainName={domainName}\n\t    \t\t/>\n    \t\t\t<AlgorithmOptions\n    \t\t\t\tsetAlgorithm={this.setAlgorithm}\n\t\t\t\t/>\n                <ElevationGain \n                    setElevationGain={this.setElevationGain}\n                />\n                <Tolerance \n                    elevationGain={this.state.elevationGain}\n                    setTolerance={this.setTolerance}\n                    disabled={this.state.elevationGain === 'none' ? true : false}\n                />\n                <MultiPathOption\n                    setNumber={this.setNumber}\n                />\n                <SearchButton \n                    state={this.state}\n                    setTrigger={this.setButtonTrigger}\n                    isLoading={this.state.findPathLoading}\n\t\t\t    />\n      \t\t</div>\n    \t);\n  \t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}